# server.tomcat这些配置项用于调整 Spring Boot 内嵌的 Tomcat 容器的行为。
# 线程池与连接管理
# 最大线程数，控制 Tomcat 能并发处理的最大请求数
server.tomcat.threads.max=3
# 维护的最小空闲线程数，以应对突发流量
server.tomcat.threads.min-spare=2
# 当所有线程都忙时，允许排队的请求数，超出后客户端会被拒绝
server.tomcat.accept-count=10
# 最大并发连接数，超出后请求被拒绝
server.tomcat.max-connections=10000
# 未完成请求前的连接超时（例如读取 headers）
server.tomcat.connection-timeout=5s
# 指定 Tomcat 在解析 application/x-www-form-urlencoded 或 multipart/form-data（HTML 表单）提交时，单次 POST 表单内容的最大大小（字节为单位）
server.tomcat.max-http-form-post-size=2MB
# 限制 吞吐请求体的最大大小，防止大 payload 攻击
server.tomcat.max-swallow-size=2MB

# Keep‑Alive
# 设置单个 TCP 连接上允许处理多少个 HTTP 请求，默认100。达到后会关闭连接 https://stackoverflow.com/questions/20763999/explain-http-keep-alive-mechanism
server.tomcat.max-keep-alive-requests=200
# 设置连接空闲等待新请求的超时时间（单位毫秒），建议至少 60s
#⚠️ 注意：HTTP/2不支持该设置，仅对 HTTP/1.1 生效
server.tomcat.keep-alive-timeout=120000



# 切换连接协议可提升高并发性能：NIO 使用非阻塞 IO，APR 是基于 C 库的高性能方案
# 使用 NIO 协议（Java 非阻塞 I/O）
#server.tomcat.protocol=org.apache.coyote.http11.Http11NioProtocol
# 可选：使用原生 APR 连接器提升性能
# server.tomcat.protocol=org.apache.coyote.http11.Http11AprProtocol


# 端口设置
server.port=8080

# 日志设置
logging.level.root=info
logging.level.com.example=debug

# 暴露health端点（包含details）
management.endpoints.web.exposure.include=health
management.endpoint.health.show-details=always